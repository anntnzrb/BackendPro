// <auto-generated />
using System;
using BackendPro.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendPro.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251025213321_AddResenas")]
    partial class AddResenas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackendPro.Core.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biografia")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Actores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biografia = "Actor estadounidense ganador del Óscar, reconocido por sus colaboraciones con Scorsese y Nolan.",
                            FechaNacimiento = new DateTime(1974, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Leonardo DiCaprio"
                        },
                        new
                        {
                            Id = 2,
                            Biografia = "Actor británico conocido por sus transformaciones físicas y su papel como Batman.",
                            FechaNacimiento = new DateTime(1974, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Christian Bale"
                        },
                        new
                        {
                            Id = 3,
                            Biografia = "Actriz estadounidense emblemática del cine de Tarantino.",
                            FechaNacimiento = new DateTime(1970, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Uma Thurman"
                        },
                        new
                        {
                            Id = 4,
                            Biografia = "Actor estadounidense con una carrera prolífica en cine y televisión, habitual en las películas de Tarantino.",
                            FechaNacimiento = new DateTime(1948, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Samuel L. Jackson"
                        },
                        new
                        {
                            Id = 5,
                            Biografia = "Leyenda del cine estadounidense, rostro recurrente en la filmografía de Scorsese.",
                            FechaNacimiento = new DateTime(1943, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Robert De Niro"
                        },
                        new
                        {
                            Id = 6,
                            Biografia = "Actor irlandés conocido por su presencia magnética y su colaboración con Nolan.",
                            FechaNacimiento = new DateTime(1976, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Cillian Murphy"
                        });
                });

            modelBuilder.Entity("BackendPro.Core.Entities.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nacionalidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Directores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaNacimiento = new DateTime(1970, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nacionalidad = "Reino Unido",
                            Nombre = "Christopher Nolan"
                        },
                        new
                        {
                            Id = 2,
                            FechaNacimiento = new DateTime(1963, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nacionalidad = "Estados Unidos",
                            Nombre = "Quentin Tarantino"
                        },
                        new
                        {
                            Id = 3,
                            FechaNacimiento = new DateTime(1942, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nacionalidad = "Estados Unidos",
                            Nombre = "Martin Scorsese"
                        },
                        new
                        {
                            Id = 4,
                            FechaNacimiento = new DateTime(1967, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nacionalidad = "Canadá",
                            Nombre = "Denis Villeneuve"
                        });
                });

            modelBuilder.Entity("BackendPro.Core.Entities.Genero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Generos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Relatos que mantienen la tensión con giros inesperados y climas intensos.",
                            Nombre = "Suspenso"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Historias centradas en el mundo criminal y sus consecuencias.",
                            Nombre = "Crimen"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Películas llenas de adrenalina, persecuciones y secuencias espectaculares.",
                            Nombre = "Acción"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Narrativas profundas que exploran conflictos humanos y emocionales.",
                            Nombre = "Drama"
                        });
                });

            modelBuilder.Entity("BackendPro.Core.Entities.Pelicula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<int>("Duracion")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaEstreno")
                        .HasColumnType("datetime2");

                    b.Property<int>("GeneroId")
                        .HasColumnType("int");

                    b.Property<string>("ImagenUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Sinopsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.HasIndex("GeneroId");

                    b.ToTable("Peliculas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DirectorId = 2,
                            Duracion = 154,
                            FechaEstreno = new DateTime(1994, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneroId = 2,
                            ImagenUrl = "https://image.tmdb.org/t/p/w500/pulp-fiction.jpg",
                            Sinopsis = "Historias entrelazadas de crimen en Los Ángeles con diálogos afilados y humor negro característicos de Tarantino.",
                            Titulo = "Pulp Fiction"
                        },
                        new
                        {
                            Id = 2,
                            DirectorId = 1,
                            Duracion = 152,
                            FechaEstreno = new DateTime(2008, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneroId = 3,
                            ImagenUrl = "https://image.tmdb.org/t/p/w500/the-dark-knight.jpg",
                            Sinopsis = "Batman enfrenta al Joker en una batalla que pone a prueba la moralidad de Gotham y sus guardianes.",
                            Titulo = "The Dark Knight"
                        },
                        new
                        {
                            Id = 3,
                            DirectorId = 1,
                            Duracion = 148,
                            FechaEstreno = new DateTime(2010, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneroId = 1,
                            ImagenUrl = "https://image.tmdb.org/t/p/w500/inception.jpg",
                            Sinopsis = "Un equipo se infiltra en los sueños para implantar ideas, desdibujando los límites entre realidad y subconsciente.",
                            Titulo = "Inception"
                        },
                        new
                        {
                            Id = 4,
                            DirectorId = 3,
                            Duracion = 151,
                            FechaEstreno = new DateTime(2006, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneroId = 2,
                            ImagenUrl = "https://image.tmdb.org/t/p/w500/the-departed.jpg",
                            Sinopsis = "Un infiltrado en la mafia y un topo en la policía juegan al gato y al ratón en Boston.",
                            Titulo = "The Departed"
                        },
                        new
                        {
                            Id = 5,
                            DirectorId = 2,
                            Duracion = 111,
                            FechaEstreno = new DateTime(2003, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneroId = 3,
                            ImagenUrl = "https://image.tmdb.org/t/p/w500/kill-bill-vol1.jpg",
                            Sinopsis = "La Novia inicia su venganza feroz contra el Escuadrón Asesino Víbora Mortal tras despertar de un coma.",
                            Titulo = "Kill Bill: Volumen 1"
                        },
                        new
                        {
                            Id = 6,
                            DirectorId = 1,
                            Duracion = 180,
                            FechaEstreno = new DateTime(2023, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GeneroId = 4,
                            ImagenUrl = "https://image.tmdb.org/t/p/w500/oppenheimer.jpg",
                            Sinopsis = "El físico J. Robert Oppenheimer lidera el Proyecto Manhattan y confronta el peso moral de crear la bomba atómica.",
                            Titulo = "Oppenheimer"
                        });
                });

            modelBuilder.Entity("BackendPro.Core.Entities.PeliculaActor", b =>
                {
                    b.Property<int>("PeliculaId")
                        .HasColumnType("int");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.HasKey("PeliculaId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("PeliculasActor");

                    b.HasData(
                        new
                        {
                            PeliculaId = 1,
                            ActorId = 3
                        },
                        new
                        {
                            PeliculaId = 1,
                            ActorId = 4
                        },
                        new
                        {
                            PeliculaId = 2,
                            ActorId = 2
                        },
                        new
                        {
                            PeliculaId = 2,
                            ActorId = 4
                        },
                        new
                        {
                            PeliculaId = 3,
                            ActorId = 6
                        },
                        new
                        {
                            PeliculaId = 3,
                            ActorId = 2
                        },
                        new
                        {
                            PeliculaId = 4,
                            ActorId = 1
                        },
                        new
                        {
                            PeliculaId = 4,
                            ActorId = 5
                        },
                        new
                        {
                            PeliculaId = 5,
                            ActorId = 3
                        },
                        new
                        {
                            PeliculaId = 6,
                            ActorId = 6
                        },
                        new
                        {
                            PeliculaId = 6,
                            ActorId = 1
                        });
                });

            modelBuilder.Entity("BackendPro.Core.Entities.Resena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Calificacion")
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("PeliculaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PeliculaId");

                    b.ToTable("Resenas");
                });

            modelBuilder.Entity("BackendPro.Core.Entities.Pelicula", b =>
                {
                    b.HasOne("BackendPro.Core.Entities.Director", "Director")
                        .WithMany("Peliculas")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BackendPro.Core.Entities.Genero", "Genero")
                        .WithMany("Peliculas")
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Genero");
                });

            modelBuilder.Entity("BackendPro.Core.Entities.PeliculaActor", b =>
                {
                    b.HasOne("BackendPro.Core.Entities.Actor", "Actor")
                        .WithMany("PeliculasActor")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendPro.Core.Entities.Pelicula", "Pelicula")
                        .WithMany("PeliculasActor")
                        .HasForeignKey("PeliculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Pelicula");
                });

            modelBuilder.Entity("BackendPro.Core.Entities.Resena", b =>
                {
                    b.HasOne("BackendPro.Core.Entities.Pelicula", "Pelicula")
                        .WithMany("Resenas")
                        .HasForeignKey("PeliculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pelicula");
                });

            modelBuilder.Entity("BackendPro.Core.Entities.Actor", b =>
                {
                    b.Navigation("PeliculasActor");
                });

            modelBuilder.Entity("BackendPro.Core.Entities.Director", b =>
                {
                    b.Navigation("Peliculas");
                });

            modelBuilder.Entity("BackendPro.Core.Entities.Genero", b =>
                {
                    b.Navigation("Peliculas");
                });

            modelBuilder.Entity("BackendPro.Core.Entities.Pelicula", b =>
                {
                    b.Navigation("PeliculasActor");

                    b.Navigation("Resenas");
                });
#pragma warning restore 612, 618
        }
    }
}
